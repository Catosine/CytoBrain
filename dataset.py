# Made by Cyto
#     　　　　 ＿ ＿
# 　　　　　／＞　　 フ
# 　　　　　|   _　 _l
# 　 　　　／` ミ＿xノ
# 　　 　 /　　　 　 |
# 　　　 /　 ヽ　　 ﾉ
# 　 　 │　　|　|　|
# 　／￣|　　 |　|　|
# 　| (￣ヽ＿_ヽ_)__)
# 　＼二つ ；
import os
import os.path as osp

import numpy as np
import cv2
from torch.utils.data import Dataset


class Algonauts2023(Dataset):

    def __init__(self, data_path: str, include: list=None, exclude: list=None, train: bool = True):

        """
            Initialize a torch.utils.data.Dataset object for algonauts2023 dataset

            Args:
                data_path,              str, path to the algonauts2023 dataset
                include,                list, use subjects only contained in this list.
                                            Note that this argument will supress <exclude> arg
                exclude,                list, do not use subjects contained in this list.
                                            Note that this argument only takes effect when <include> is not given
                train,                  bool, training data will be loaded if True. Test data otherwise.
        """

        # get all subjects
        self.subjects = [x for x in os.listdir(data_path) if osp.isdir(x)]
        if include:
            self.subjects = [x for x in self.subjects if x in include]
        elif exclude:
            self.subjects = [x for x in self.subjects if x not in exclude]

        # collect data paths
        path_struct = osp.join(data_path, "{}", "{}_split")
        self.dataset = list()
        for subj in self.subjects:

            if train:
                shared_path = osp.join(path_struct.format(subj, "training"), "training_{}")
                lh_fmri = np.load(osp.join(shared_path.format("fmri"), "lh_training_fmri.npy"))
                rh_fmri = np.load(osp.join(shared_path.format("fmri"), "rh_training_fmri.npy"))
                for img in os.listdir(shared_path.format("images")):
                    self.dataset.append([osp.join(shared_path, img), 0, 1])
            else:
                shared_path = osp.join(path_struct.format(subj, "test"), "test_images")
                for img in os.listdir(shared_path):
                    self.dataset.append([osp.join(shared_path, img), 0, 0])

    
    def __getitem__(self, index: int):

        """
            Load designated sample

            Arg:
                index,          int, sample id
            
            Returns:
                image,          np.ndarray, the 3d numpy array of the image used to retrive fmri data
                lh_fmri,        np.ndarray, the LH FMRI data generated by the image
                rh_fmri,        np.ndarray, the RH FMRI data generated by the image
        """

        sample = self.dataset[index]
        image = cv2.imread(sample[0])
        lh_fmri = sample[1]
        rh_fmri = sample[2]

        return image, lh_fmri, rh_fmri
